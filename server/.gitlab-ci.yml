# image: golang:latest

# stages:
#   - test
#   - build
#   - deploy

# format:
#   stage: test
#   script:
#     - go fmt $(go list ./... | grep -v /vendor/)
#     - go vet $(go list ./... | grep -v /vendor/)
#     - go test -race $(go list ./... | grep -v /vendor/)

# compile:
#   stage: build
#   script:
#     - mkdir -p mybinaries
#     - go build -o mybinaries ./...
#   artifacts:
#     paths:
#       - mybinaries

# deploy:
#   stage: deploy-production
#   script: echo "Define your deployment script!"
#   environment: production

# deploy:
#   stage: deploy-staging
#   script: echo "Define your deployment script!"
#   environment: staging


image: golang:latest

.go-cache:
    variables:
        GOPATH: $CI_PROJECT_DIR/.go
    cache:
      paths:
        - .go/pkg/mod/

variables:
  OUTPUT_NAME: __bin__/$CI_PROJECT_NAME

stages:
  - lint
  - test
  - build
  - release

lint:
    image: golangci/golangci-lint:latest
    stage: lint
    extends: .go-cache
    allow_failure: false
    script:
      - golangci-lint run -v

test:
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)

build:
  stage: build
  script:
    - mkdir -p $OUTPUT_NAME
    - go build -o $OUTPUT_NAME ./...
  artifacts:
    paths:
      - $OUTPUT_NAME

build_image:
  image: docker:stable
  stage: release
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile
